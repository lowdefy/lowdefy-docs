id: MongoDB
type: PageSiderMenu
public: true
properties:
  title: MongoDB
  header:
    theme: light
  sider:
    width: 256px
  layout:
    style:
      background: '#FFFFFF'
areas:  
  content:
    justify: center
    blocks:
    - id: max_width
      type: Box
      layout:
        size: 800
        shrink: 1
      blocks:
        - id: title
          type: Title
          properties:
            content: MongoDB
        - id: markdown
          type: Markdown
          style:
            '.markdown-body':
              fontSize: 14px
          properties:
            content: |
              MongoDB is a NoSQL database that stores JSON-like documents. These documents are stored in collections, which are like database tables. The fields inside these document can differ from document to document, but generally they are all more or less the same. However documents with different schemas can be stored in the same collection.

              ##### ObjectIds

              MongoDB uses the _id field as the id for a document. This has to be unique for every document in the collection. If no _id is provided when the document is created, a MongoDB [ObjectId](https://docs.mongodb.com/manual/reference/method/ObjectId/) is created for that document. This id includes a timestamp, a random element and an incrementing counter, to ensure it is unique even if multiple ids are created at the same time.
              
              The _id is often represented as:

              ```js
              {
                _id: ObjectId("507f1f77bcf86cd799439011")
              }
              ```

              To be able to transmit these ids over JSON network connections, and to use them in Lowdefy apps, Lowdefy serializes these ids as (in YAML):
              ```yaml
              _id:
                _oid: 507f1f77bcf86cd799439011
              ```

              Ids specified in this way will be treated as ObjectIds by MongoDB requests and mutations.


              ## Connections

              Connection types:
                - MongoDBCollection

              ### MongoDBCollection

              The `mongodb_collection` connection sets up a connection to a MongoDB deployment. A [connection URI](https://docs.mongodb.com/manual/reference/connection-string/index.html) with authentication credentials (username and password) is required. The URI can be in the standard or dns seedlist (srv) formats. Connections are defined on a collection level, since this allows for read/write access control on a per collection level. Access control can also be managed using the roles in the database.

              >Since the connection URI contains authentication secrets, it should be stored using the [`_secret`](operators/secret.md) operator.

              #### Properties
              - `databaseUri`: _String_ - **REQUIRED** - Connection uri string for the MongoDb deployment. Should be stored using the [_secret](operators/secret.md) operator. 
              - `databaseName`: _String_ - Default: Database specified in connection string - The name of the database in the MongoDB deployment.
              - `collection`: _String_ - **REQUIRED** - The name of the MongoDB collection.
              - `read`: _Boolean_ - Default: `true` - Allow read operations like find on the collection.
              - `write`: _Boolean_ - Default: `false` - Allow write operations like find or update on the collection.

              #### Examples

              MongoDB collection with reads and writes:
              ```yaml
              connections:
                - id: my_collection
                  type: AwsS3Bucket
                  properties:
                    databaseUri:
                      _secret: my_database_uri
                    collection: my_collection_name
                    write: true
              ```

              ## Requests and Mutations

              Request types:
                - MongoDBAggregation
                - MongoDBFind
                - MongoDBFindOne

              Mutation types:
                - MongoDBAggregation
                - MongoDBDeleteMany
                - MongoDBDeleteOne
                - MongoDBInsertMany
                - MongoDBInsertOne
                - MongoDBUpdateMany
                - MongoDBUpdateOne


              ### MongoDBAggregation

              The `MongoDBAggregation` request or mutation executes an [aggregation pipeline](https://docs.mongodb.com/manual/core/aggregation-pipeline/) in the collection specified in the connectionId. It returns the array of documents returned by the aggregation. Aggregation pipelines are MongoDB's data processing and aggregation framework. They are based on a series of stages, each of which apply a transformation to the data passed through them, like sorting, grouping or calculating additional fields.

              >Cursors are not supported. The request will return the whole body of the response as an array.

              #### Properties
              - `pipeline`: _Array_ - **REQUIRED** - Array containing all the aggregation framework commands for the execution.
              - `options`: _Object_ - Optional settings. See the [driver docs](https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#aggregate) for more information. Supported settings are:
                - `readPreference`: _String_ **|** _Object_ - The preferred read preference.
                - `allowDiskUse`: _Boolean_ - Default: `false` - Allow disk use on the MongoDB server to store temporary results for the aggregation.
                - `maxTimeMS`: _Integer_ - Specifies a cumulative time limit in milliseconds for processing operations on the cursor.
                - `bypassDocumentValidation`: _Boolean_ - Default: `false` - Allow driver to bypass schema validation in MongoDB 3.2 or higher.
                - `collation`: _Object_ - Specify collation (MongoDB 3.4 or higher) settings for update operation.
                - `comment`: _String_ - Add a [comment](https://docs.mongodb.com/manual/reference/operator/query/comment/index.html) to the aggregation. These comments are visible in the MongoDB profile log, making them easier to interpret.
                - `hint`: _String_ **|** _Object_ - Add an index selection hint to an aggregation command.

              #### Examples

              Calculate average score by region:
              ```yaml
              requests:
                - id: avg_spend_by_region
                  type:  MongoDBAggregation
                  connectionId: my_mongodb_collection_id
                  properties:
                    pipeline:
                      - $group:
                          _id: $region
                          score:
                            $avg: $score
                      - $project:
                          _id: 0
                          region: $_id
                          score: 1
                      - $sort:
                          score: 1
              ```

              ### MongoDBDeleteMany

              The `MongoDBDeleteMany` mutation deletes multiple documents in the collection specified in the connectionId. It requires a filter, which is written in the query syntax, to select a documents to delete.

              #### Properties
              - `filter`: _Object_ - **REQUIRED** - The filter used to select the document to update.
              - `options`: _Object_ - Optional settings. See the [driver docs](https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#updateOne) for more information. Supported settings are:
                - `checkKeys`: _Boolean_ - Default: `false` - If true, will throw if bson documents start with $ or include a . in any key value.
                - `collation`: _Object_ - Specify collation (MongoDB 3.4 or higher) settings for update operation.
                - `hint`: _Object_ - An optional hint for query optimization.
                - `ignoreUndefined`: _Boolean_ - Default: `false` - Specify if the BSON serializer should ignore undefined fields.
                - `j`: _Boolean_ - Specify a journal write concern.
                - `w`: _Integer_ **|** _String_ - The write concern
                - `wtimeout`: _Integer_  - The write concern timeout.

              #### Examples

              Delete all documents older than a specific date:
              ```yaml
              mutations:
                - id: delete_old_documents
                  type:  MongoDBDeleteMany
                  properties:
                    filter:
                      created_date:
                        $lt:
                          _date: 2020-01-01
              ```

              ### MongoDBDeleteOne

              The `MongoDBDeleteOne` mutation deletes a single document in the collection specified in the connectionId. It requires a filter, which is written in the query syntax, to select a document to delete. It will delete the first document that matches the filter.

              #### Properties
              - `filter`: _Object_ - **REQUIRED** - The filter used to select the document to update.
              - `options`: _Object_ - Optional settings. See the [driver docs](https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#updateOne) for more information. Supported settings are:
                - `checkKeys`: _Boolean_ - Default: `false` - If true, will throw if bson documents start with $ or include a . in any key value.
                - `collation`: _Object_ - Specify collation (MongoDB 3.4 or higher) settings for update operation.
                - `hint`: _Object_ - An optional hint for query optimization.
                - `ignoreUndefined`: _Boolean_ - Default: `false` - Specify if the BSON serializer should ignore undefined fields.
                - `j`: _Boolean_ - Specify a journal write concern.
                - `w`: _Integer_ **|** _String_ - The write concern
                - `wtimeout`: _Integer_  - The write concern timeout.

              #### Examples

              Delete a document by _id:
              ```yaml
              mutations:
                - id: delete_selected_document
                  type:  MongoDBUpdateMany
                  properties:
                    filter:
                      _id:
                        _state: selected_id
              ```

              ### MongoDBFind

              The `MongoDBFind` request executes a MongoDB [query](https://docs.mongodb.com/manual/tutorial/query-documents/) on the collection specified in the connectionId. It returns the array of documents returned by the query.

              >Cursors are not supported. The request will return the whole body of the response as an array.

              #### Properties
              - `query`: _Object_ - **REQUIRED** - A MongoDB query object.
              - `options`: _Object_ - Optional settings. See the [driver docs](https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#find) for more information. Supported settings are:
                - `limit`: _Integer_ - Sets the limit of documents returned in the query.
                - `sort`: _Array_ **|** _Object_  - Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]`.
                - `projection`: _Object_ - The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` or `{'a': 0, 'b': 0}`.
                - `skip`: _Integer_ - Set to skip N documents ahead in your query (useful for pagination).
                - `hint`: _Object_ - Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}`.
                - `comment`: _String_ - Add a [comment](https://docs.mongodb.com/manual/reference/operator/query/comment/index.html) to the query. These comments are visible in the MongoDB profile log, making them easier to interpret.
                - `readPreference`: _String_ **|** _Object_ - The preferred read preference.
                - `maxTimeMS`: _Integer_ - Number of milliseconds to wait before aborting the query.
                - `collation`: _Object_ - Specify collation (MongoDB 3.4 or higher) settings for update operation.

              #### Examples

              Find top ten scores above 90:
              ```yaml
              requests:
                - id: scores_top_ten_scores_above_90
                  type:  MongoDBFind
                  properties:
                    query:
                      score:
                        $gt: 90
                    options:
                      sort:
                        - - score
                          - -1
                      limit: 10
                      projection:
                        score: 1
                        name: 1
              ```

              ### MongoDBFindOne

              The `MongoDBFindOne` request executes a MongoDB [query](https://docs.mongodb.com/manual/tutorial/query-documents/) on the collection specified in the connectionId. It returns the first document that matches the specified query.

              >Cursors are not supported. The request will return the whole body of the response as an array.

              #### Properties
              - `query`: _Object_ - **REQUIRED** - A MongoDB query object.
              - `options`: _Object_ - Optional settings. See the [driver docs](https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#find) for more information. Supported settings are:
                - `limit`: _Integer_ - Sets the limit of documents returned in the query.
                - `sort`: _Array_ **|** _Object_  - Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]`.
                - `projection`: _Object_ - The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` or `{'a': 0, 'b': 0}`.
                - `skip`: _Integer_ - Set to skip N documents ahead in your query (useful for pagination).
                - `hint`: _Object_ - Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}`.
                - `comment`: _String_ - Add a [comment](https://docs.mongodb.com/manual/reference/operator/query/comment/index.html) to the query. These comments are visible in the MongoDB profile log, making them easier to interpret.
                - `readPreference`: _String_ **|** _Object_ - The preferred read preference.
                - `maxTimeMS`: _Integer_ - Number of milliseconds to wait before aborting the query.
                - `collation`: _Object_ - Specify collation (MongoDB 3.4 or higher) settings for update operation.

              #### Examples

              Find a document by id:
              ```yaml
              requests:
                - id: find_by_id
                  type:  MongoDBFindOne
                  properties:
                    query:
                      _id:
                        _input: _id
              ```

              ### MongoDBInsertMany

              The `MongoDBInsertMany` mutation inserts an array of documents into the collection specified in the connectionId. If a `_id` field is not specified on a document, a MongoDB `ObjectID` will be generated.

              #### Properties
              - `docs`: _Array_ of _Object_ - **REQUIRED** - The array of documents to be inserted.
              - `options`: _Object_ - Optional settings. See the [driver docs](https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#insertMany) for more information. Supported settings are:
                - `bypassDocumentValidation`: _Boolean_ - Default: `false` - Allow driver to bypass schema validation in MongoDB 3.2 or higher
                - `checkKeys`: _Boolean_ - Default: `true` - If true, will throw if bson documents start with $ or include a . in any key value.
                - `forceServerObjectId`: _Boolean_ - Default: `false` - Force server to assign _id values instead of driver.
                - `j`: _Boolean_ - Default: `false` - Specify a journal write concern.
                - `ignoreUndefined`: _Boolean_ - Default: `false` - Specify if the BSON serializer should ignore undefined fields.
                - `w`: _Integer_ **|** _String_ - The write concern
                - `wtimeout`: _Integer_  - The write concern timeout.


              #### Examples

              Insert a set of documents:
              ```yaml
              mutations:
                - id: insert_new_comment
                  type:  MongoDBInsertOne
                  properties:
                    docs:
                      - _id: 1
                        value: 4 
                      - _id: 2
                        value: 1 
                      - _id: 3
                        value: 7 

              ```

              ### MongoDBInsertOne

              The `MongoDBInsertOne` mutation inserts a document into the collection specified in the connectionId. If a `_id` field is not specified, a MongoDB `ObjectID` will be generated.

              #### Properties
              - `doc`: _Object_ - **REQUIRED** - The document to be inserted.
              - `options`: _Object_ - Optional settings. See the [driver docs](https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#insertOne) for more information. Supported settings are:
                - `bypassDocumentValidation`: _Boolean_ - Default: `false` - Allow driver to bypass schema validation in MongoDB 3.2 or higher
                - `checkKeys`: _Boolean_ - Default: `true` - If true, will throw if bson documents start with $ or include a . in any key value.
                - `forceServerObjectId`: _Boolean_ - Default: `false` - Force server to assign _id values instead of driver.
                - `j`: _Boolean_ - Default: `false` - Specify a journal write concern.
                - `ignoreUndefined`: _Boolean_ - Default: `false` - Specify if the BSON serializer should ignore undefined fields.
                - `w`: _Integer_ **|** _String_ - The write concern
                - `wtimeout`: _Integer_  - The write concern timeout.

              #### Examples

              Insert a document:
              ```yaml
              mutations:
                - id: insert_new_comment
                  type:  MongoDBInsertOne
                  properties:
                    doc:
                      comment:
                        _state: comment_input
                      user_id:
                        _user: id
                      timestamp:
                        _date: now
              ```

              ### MongoDBUpdateMany

              The `MongoDBUpdateMany` mutation updates multiple documents that match a certain criteria in the collection specified in the connectionId. It requires a filter, which is written in the query syntax, to select the documents to update.

              #### Properties
              - `filter`: _Object_ - **REQUIRED** - The filter used to select the document to update.
              - `update`: _Object_ - **REQUIRED** - The update operations to be applied to the document.
              - `options`: _Object_ - Optional settings. See the [driver docs](https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#updateOne) for more information. Supported settings are:
                - `arrayFilters`: _Array_ - Array filters for the [`$[<identifier>]`](https://docs.mongodb.com/manual/reference/operator/update/positional-filtered/) array update operator.  
                - `bypassDocumentValidation`: _Boolean_ - Default: `false` - Allow driver to bypass schema validation in MongoDB 3.2 or higher.
                - `checkKeys`: _Boolean_ - Default: `false` - If true, will throw if bson documents start with $ or include a . in any key value.
                - `collation`: _Object_ - Specify collation (MongoDB 3.4 or higher) settings for update operation.
                - `forceServerObjectId`: _Boolean_ - Force server to assign _id values instead of driver.
                - `hint`: _Object_ - An optional hint for query optimization.
                - `ignoreUndefined`: _Boolean_ - Default: `false` - Specify if the BSON serializer should ignore undefined fields.
                - `j`: _Boolean_ - Specify a journal write concern.
                - `upsert`: _Boolean_ - Default: `false` - Insert document if no match is found.
                - `w`: _Integer_ **|** _String_ - The write concern
                - `wtimeout`: _Integer_  - The write concern timeout.

              #### Examples

              Set a list of documents as resolved:
              ```yaml
              mutations:
                - id: set_resolved
                  type:  MongoDBUpdateMany
                  properties:
                    # Select all documents where the _id is in selected_issues_list in state
                    filter:
                      _id:
                        $in: 
                          _state: selected_issues_list
                    update:
                      $set:
                        resolved: true
              ```

              Mark all documents with score less than 6 as urgent:
              ```yaml
              mutations:
                - id: set_resolved
                  type:  MongoDBUpdateMany
                  properties:
                    filter:
                      score:
                        $lt: 6
                    update:
                      $set:
                        status: urgent
              ```

              ### MongoDBUpdateOne

              The `MongoDBUpdateOne` mutation updates a single document in the collection specified in the connectionId. It requires a filter, which is written in the query syntax, to select a document to update. It will update the first document that matches the filter. If the `upsert` option is set to true, it will insert a new document if no document is found to update.

              #### Properties
              - `filter`: _Object_ - **REQUIRED** - The filter used to select the document to update.
              - `update`: _Object_ - **REQUIRED** - The update operations to be applied to the document.
              - `options`: _Object_ - Optional settings. See the [driver docs](https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#updateOne) for more information. Supported settings are:
                - `arrayFilters`: _Array_ - Array filters for the [`$[<identifier>]`](https://docs.mongodb.com/manual/reference/operator/update/positional-filtered/) array update operator.  
                - `bypassDocumentValidation`: _Boolean_ - Default: `false` - Allow driver to bypass schema validation in MongoDB 3.2 or higher.
                - `checkKeys`: _Boolean_ - Default: `false` - If true, will throw if bson documents start with $ or include a . in any key value.
                - `collation`: _Object_ - Specify collation (MongoDB 3.4 or higher) settings for update operation.
                - `forceServerObjectId`: _Boolean_ - Force server to assign _id values instead of driver.
                - `hint`: _Object_ - An optional hint for query optimization.
                - `ignoreUndefined`: _Boolean_ - Default: `false` - Specify if the BSON serializer should ignore undefined fields.
                - `j`: _Boolean_ - Specify a journal write concern.
                - `upsert`: _Boolean_ - Default: `false` - Insert document if no match is found.
                - `w`: _Integer_ **|** _String_ - The write concern
                - `wtimeout`: _Integer_  - The write concern timeout.


              #### Examples

              Update a document:
              ```yaml
              mutations:
                - id: update
                  type:  MongoDBUpdateOne
                  properties:
                    filter:
                      _id:
                        _state: _id
                    update:
                      $set:
                        _state: true
              ```

              Like a comment:
              ```yaml
              mutations:
                - id: like_comment
                  type:  MongoDBUpdateOne
                  properties:
                    filter:
                      _id:
                        _state: comments.$_id
                    update:
                      $inc:
                        likes: 1
                      $push:
                        liked_by:
                          _user.id: 
                      $set:
                        last_liked:
                          _date: now
              ```
